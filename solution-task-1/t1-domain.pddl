(define (domain scheduling-domain)
    (:requirements :typing)
    (:types time room inhabitant - object)
    (:predicates  (setup ?ih - inhabitant)
        (currentTime ?time - time)
        (canArrive ?ih - inhabitant ?time - time ?r - room)
        (unlocked ?r - room ?time - time)
        (locked ?r - room)
        (at ?r - room ?time - time)
		(next ?time - time ?time2 - time)
    )

	(:action unlock 
        :parameters (?r - room ?time - time)
        :precondition (and (currentTime ?time)
			(locked ?r)
		)
        :effect (and  (not (locked ?r))
		    (unlocked ?r ?time)
        )
    )
    
	 (:action join
        :parameters (?r - room ?time - time)
        :precondition   (and (currentTime ?time)
			(unlocked ?r ?time)
		)
        :effect (at ?r ?time) 
    )

	(:action wait 
		:parameters (?time - time ?time2 - time)
		:precondition (and (currentTime ?time)
			(next ?time ?time2)
		) 
		:effect (and (not (currentTime ?time))
			(currentTime ?time2)
		)
	)

    (:action showRoom
	    :parameters (?time - time ?time2 - time ?r - room ?ih - inhabitant )
	    :precondition (and 
            (canArrive ?ih ?time ?r) 
			(at ?r ?time)
			(currentTime ?time)
			(next ?time ?time2)
        )
	    :effect (and (setup ?ih)
			(not (currentTime ?time))
			(currentTime ?time2)
		)
    )
)